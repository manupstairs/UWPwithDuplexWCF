//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 16.0.29728.190
// 
namespace UWPWithWCF.BrightnessService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BrightnessService.IBrightnessNotificationService", CallbackContract=typeof(UWPWithWCF.BrightnessService.IBrightnessNotificationServiceCallback))]
    public interface IBrightnessNotificationService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBrightnessNotificationService/SubscribeBrightnessNotification" +
            "")]
        System.Threading.Tasks.Task SubscribeBrightnessNotificationAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBrightnessNotificationServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBrightnessNotificationService/NotifyBrightness")]
        void NotifyBrightness(int value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBrightnessNotificationServiceChannel : UWPWithWCF.BrightnessService.IBrightnessNotificationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BrightnessNotificationServiceClientBase : System.ServiceModel.DuplexClientBase<UWPWithWCF.BrightnessService.IBrightnessNotificationService>, UWPWithWCF.BrightnessService.IBrightnessNotificationService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public BrightnessNotificationServiceClientBase(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, BrightnessNotificationServiceClientBase.GetDefaultBinding(), BrightnessNotificationServiceClientBase.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IBrightnessNotificationService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BrightnessNotificationServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, BrightnessNotificationServiceClientBase.GetBindingForEndpoint(endpointConfiguration), BrightnessNotificationServiceClientBase.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BrightnessNotificationServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, BrightnessNotificationServiceClientBase.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BrightnessNotificationServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, BrightnessNotificationServiceClientBase.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BrightnessNotificationServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task SubscribeBrightnessNotificationAsync() {
            return base.Channel.SubscribeBrightnessNotificationAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IBrightnessNotificationService)) {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IBrightnessNotificationService)) {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8001/BrightnessNotificationService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return BrightnessNotificationServiceClientBase.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IBrightnessNotificationService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return BrightnessNotificationServiceClientBase.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IBrightnessNotificationService);
        }
        
        public enum EndpointConfiguration {
            
            NetTcpBinding_IBrightnessNotificationService,
        }
    }
    
    public class NotifyBrightnessReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NotifyBrightnessReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int value {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public partial class BrightnessNotificationServiceClient : BrightnessNotificationServiceClientBase {
        
        public BrightnessNotificationServiceClient(EndpointConfiguration endpointConfiguration) : 
                this(new BrightnessNotificationServiceClientCallback(), endpointConfiguration) {
        }
        
        private BrightnessNotificationServiceClient(BrightnessNotificationServiceClientCallback callbackImpl, EndpointConfiguration endpointConfiguration) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfiguration) {
            callbackImpl.Initialize(this);
        }
        
        public BrightnessNotificationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new BrightnessNotificationServiceClientCallback(), binding, remoteAddress) {
        }
        
        private BrightnessNotificationServiceClient(BrightnessNotificationServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            callbackImpl.Initialize(this);
        }
        
        public BrightnessNotificationServiceClient() : 
                this(new BrightnessNotificationServiceClientCallback()) {
        }
        
        private BrightnessNotificationServiceClient(BrightnessNotificationServiceClientCallback callbackImpl) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl)) {
            callbackImpl.Initialize(this);
        }
        
        public event System.EventHandler<NotifyBrightnessReceivedEventArgs> NotifyBrightnessReceived;
        
        private void OnNotifyBrightnessReceived(object state) {
            if ((this.NotifyBrightnessReceived != null)) {
                object[] results = ((object[])(state));
                this.NotifyBrightnessReceived(this, new NotifyBrightnessReceivedEventArgs(results, null, false, null));
            }
        }
        
        private class BrightnessNotificationServiceClientCallback : object, IBrightnessNotificationServiceCallback {
            
            private BrightnessNotificationServiceClient proxy;
            
            public void Initialize(BrightnessNotificationServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void NotifyBrightness(int value) {
                this.proxy.OnNotifyBrightnessReceived(new object[] {
                            value});
            }
        }
    }
}
